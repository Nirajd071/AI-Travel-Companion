version: '3.8'

services:
  # PostgreSQL Database with PostGIS Extension
  postgres:
    image: postgis/postgis:15-3.3
    container_name: ai-travel-postgres
    environment:
      POSTGRES_DB: ai_travel_db
      POSTGRES_USER: travel_user
      POSTGRES_PASSWORD: travel_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./backend/sql/postgis-init.sql:/docker-entrypoint-initdb.d/02-postgis.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U travel_user -d ai_travel_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ai-travel-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai-travel-backend
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ai_travel_db
      DB_USER: travel_user
      DB_PASS: travel_pass
      REDIS_URL: redis://redis:6379
      AI_SERVICE_URL: http://ai-services:8000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: npm run dev

  # MongoDB for Analytics & ML Logs
  mongodb:
    image: mongo:7
    container_name: ai-travel-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin_pass
      MONGO_INITDB_DATABASE: ai_travel_analytics
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./backend/sql/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # AI Services
  ai-services:
    build:
      context: ./ai-services
      dockerfile: Dockerfile
    container_name: ai-travel-ai-services
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://travel_user:travel_pass@postgres/ai_travel_db
      REDIS_URL: redis://redis:6379
      MONGODB_URL: mongodb://admin:admin_pass@mongodb:27017/ai_travel_analytics?authSource=admin
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    volumes:
      - ./ai-services:/app
      - ai_models:/app/models
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: ai-travel-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - backend
      - ai-services
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:
  mongodb_data:
  ai_models:
